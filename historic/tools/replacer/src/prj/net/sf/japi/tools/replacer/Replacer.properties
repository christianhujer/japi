#
# Copyright (C) 2009  Christian Hujer
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

setForce=Try to overwrite write-protected files.
setRecursive=Descend into subdirectories recursively.
setBackup=Create backup files.
setBackupExtension=File extension for backup files (default: .bak).
setEncoding=Encoding to use for reading and writing files.
setMakeWritableCommand=The command for making a file writable. E.g. 'cleartool checkout -nc "%f"' (UNTESTED!)
setDryRun=When set, only pretend - do not really change files.
listEncodings=List available encodings for reading and writing files.
addSubstitution=Adds a substitution to the list of substitutions that will be performed.
addSubstitutionsFromFile=Specify a text file with substitutions.
helpHeader=Syntax: Replacer [OPTION...] [FILE...]\n\
    Performs the regular expression substitutions specified by the options on the specified files.\n\
    If no file is specified, the substitution is perfromed from stdin to stdout.
helpFooter=The syntax for substitutions is similar to that of perl, sed or vim:\n\
    s/regex/subst/flags\n\
    The description of the regex syntax can be found at http://java.sun.com/docs/jdk6/api/java/util/regex/Pattern.html\n\
    For a list of supported regex flags, use --helpFlags.\n\
    If multiple substitutions or files are specified, they will be executed in the same order in which they were specified.\n\
    \n\
    Examples:\n\
    Replacer -s 's/\\bfoo\\b/bar/g' myFile.txt\n    \
        Replaces each occurrence of "foo" as a single word with "bar" in the file myFile.txt.\n\
    Replacer -r true -v true -s 's/\\bchar\\b/uint8_t/g' src/ inc/\n    \
        Recursively replaces all "char" with "uint8_t" in the directories src/ and inc/.\n    \
        Also prints a list of files that were changed.\n\
    \n\
    Memory considerations: Replacer replaces files in-memory.\n\
    To be safe, assume you need 4 * max file size free heap space.\n\
    Max file size is the size of the largest file on which you want Replacer to operate.
helpFlags=Print a help on the flags.
helpExamples=Print some more examples.
setVerbose=Verbose mode - report each file that was changed.
flag.d=UNIX_LINES - ^ and $ matches \\n only. Otherwise they match \\n, \\r\\n, \\r, \\u0085, \\u2028 or \\u2029.
flag.i=CASE_INSENSITIVE - ignore case for ASCII.
flag.x=COMMENTS - Permits whitespace and comments in pattern.
flag.m=MULTILINE - If on, ^ and $ match on lines, if off ^ and $ match on the file. Usually only makes sense together with f.
flag.l=LITERAL - The pattern is taken literally, not as regular expression. All special characters loose their meanings.
flag.s=DOTALL - Make . match line terminators as well. By default, . matches any character except the line terminator.
flag.u=UNICODE_CASE - ignore case for Unicode instead of ASCII if CASE_INSENSITIVE is specified.
flag.c=CANON_EQ - Enables canonical equivalence for Unicode, e.g. \\u030A matches \\u00E5.\n  Beware, vi users: /c is NOT "confirm".
flag.g=If specified, replace all occurrences, otherwise only the first.\n  If FILE is set, this is the first in the file, otherwise this is the first in each line.
flag.f=If on, substitution is performed per-file. If off, substitution is performed line-per-line.
examples=Replacer Examples\n\n\
    Example: Insert text 'foo' at each start of line\n    \
        Replacer -s 's/^/foo/' someFile.txt\n\
    \n\
    Example: Insert text '//' at each start of line\n    \
        Replacer -s 's/^/\\/\\//' someFile.txt\n\
    \n\
    Example: Insert text 'foo' at each end of line\n    \
        Replacer -s 's/$/foo/' someFile.txt\n\
    \n\
    Example: Remove trailing whitespace\n    \
        Replacer -s 's/[ \\t]+$//' someFile.txt\n\
      Note: 's/\\s+$//' as you know it from vim wouldn't work as expected.\n\
    \n\
    Example: Change from Allman to 1TBS, taking care of comments as well\n    \
        Replacer -s 's/\\s*?( ?(?:\\/\\/.*|\\/\\*.*\\*\\/))$\\s+\\{/ {$1/mfg' -r true src/\n\
    \n\
    Note on all examples: The syntax specified is for bash and similar shells.\n\
    When running Replacer on another OS, a different command line syntax may be required.\n

